version: '2.1'

services:
  postgres:
    image: postgres:14
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    ports:
      - 5432:5432
    depends_on:
      elasticsearch:
        condition: service_healthy
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - ws_front
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  pg_metrics:
    image: wrouesnel/postgres_exporter
    networks:
      - ws_front
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres@postgres:5432/postgres?sslmode=disable

  backend:
    build:
      context: .
    labels:
      - "traefik.docker.network=ws_front"
      - "traefik.frontend.rule=Host:localhost,127.0.0.1;PathPrefix:/api"
      - "traefik.port=8080"
      - "traefik.enable=true"
    env_file:
      - .env
    networks:
      - ws_front
    depends_on:
      postgres:
        condition: service_healthy

  proxy:
    image: traefik:v1.7-alpine
    networks:
      - ws_front
    ports:
      - 80:80
      - 443:443
      - 8443:8443
      - 8080:8080
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
       - grafana_data:/var/lib/grafana
    networks:
      - ws_front

  prometheus:
    image: prom/prometheus:v2.1.0
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    networks:
      - ws_front

networks:
  ws_front:
volumes:
  grafana_data: {}
  pg_data: {}